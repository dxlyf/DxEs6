{
  "compilerOptions": {
    /* Basic Options */
    "target": "es5",                         /*指定ECMAScript目标版本：“ES3”（默认），“ES5”，“ES2015”，“ES2016”，“ES2017”或“ESNEXT”。 */
    "module": "commonjs",                     /*指定模块代码生成：commonjs，amd，system，umd，es2015或ESNext。 */
   //"allowUnreachableCode":true,
    // "lib": [],                             / *指定要包含在编译中的库文件：*/
     "allowJs": false,                       /*允许编译JavaScript文件。*/
     "outDir":"./typings",
     "declaration":false,
     // "checkJs": true,                       / *报告.js文件中的错误。 */
    // "jsx": "preserve",                     / *指定JSX代码生成：“preserve”，“react-native”或“react”。 */
    // "declaration": true,                   / *生成相应的“.d.ts”文件。 */
    // "sourceMap": true,                     / *生成相应的“.map”文件。 */
    // "outFile": "./",                       / *连接并将输出发送到单个文件。 */
    // "outDir": "./",                        / *将输出结构重定向到目录。 */
    // "rootDir": "./",                       / *指定输入文件的根目录。用--outDir来控制输出目录结构。 */
    // "removeComments": true,                / *不要发表评论输出。 */
    // "noEmit": true,                        / *不要发出输出。 */
    // "importHelpers": true,                 / *导入从'tslib'发射助手。 */
    // "downlevelIteration": true,            / *针对“ES5”或“ES3”提供对“for-of”，spread和destructuring中迭代器件的全面支持。 */
    // "isolatedModules": true,               / *将每个文件作为单独的模块传输（类似于“ts.transpileModule”）。 */
    "noResolve":false,    //不把 /// <reference``>或模块导入的文件加到编译文件列表。
    /* Strict Type-Checking Options */
     "strict": false  ,                          /*启用所有严格的类型检查选项。 */
     "noImplicitUseStrict":false,//模块输出中不包含 "use strict"指令。
    // "noImplicitAny": true,                 / *在表达式和声明上有隐含的任何类型时报错。*/
    // "strictNullChecks": true,              / *在严格的null检查模式下，null和undefined值不包含在任何类型里，只允许使用它们自己和任何来赋值（有个例外，undefined可以赋值到void）。*/
    // "noImplicitThis": true,                / *当 this表达式的值为 any类型的时候，生成一个错误。 */
    // "alwaysStrict": true,                  / *以严格模式解析，并为每个源文件发出“严格使用”。 */
    // "strictFunctionTypes":true,     //禁用函数参数双向协变检查。
    /* Additional Checks */
    // "noUnusedLocals": true,                / *若有未使用的局部变量则抛错。 */
    // "noUnusedParameters": true,            / *若有未使用的参数则抛错。 */
    // "noImplicitReturns": true,             / *当函数中的所有代码路径都不返回值时报告错误。 */
    // "noFallthroughCasesInSwitch": true,    / *在switch语句中报告错误情况的错误。 */

    /* Module Resolution Options */
    // "moduleResolution": "node",            / *指定模块分辨率策略：“节点”（Node.js）或“经典”（TypeScript 1.6之前的版本）。 */
    // "baseUrl": "./",                       / *基本目录来解析非绝对模块名称。 */
    // "paths": {},                           / *一系列将输入重新映射到相对于“baseUrl”的查找位置的条目。 * /
    // "rootDirs": [],                        / *组合内容代表运行时项目结构的根文件夹列表。 */
    // "typeRoots": [],                       / *包含来自类型定义的文件夹列表。 */
     "types": ["webpack-env"]                     /*输入声明文件以包含在编译中。 */
    // "allowSyntheticDefaultImports": true,  / *允许从默认导出模块默认导入。这不会影响代码发出，只是类型检查。 */

    /* Source Map Options */
    // "sourceRoot": "./",                    / *指定调试器应该找到TypeScript文件而不是源位置的位置。 */
    // "mapRoot": "./",                       / *指定调试器应该找到映射文件的位置而不是生成的位置。 */
    // "inlineSourceMap": true,               / *用源地图发射单个文件，而不是单独的文件。 */
    // "inlineSources": true,                 / *在单个文件内的源代码旁边发出源代码;需要设置“--inlineSourceMap”或“--sourceMap”。 */

    /* Experimental Options   */
    // "experimentalDecorators": true,        / *启用对ES7修饰器的实验性支持。 */
    // "emitDecoratorMetadata": true,         / *为装饰器启用发射类型元数据的实验支持。 */
  },
  "include":["typings/*.ts"],
  "exclude": [
    "node_modules",
    "dist",
    "typings"
  ],
  "files": [
   //  "typings/core.d.ts",
    "src/index.ts"
  ]  
}